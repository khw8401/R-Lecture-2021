#조건문
#1. []에 행 열 조건 명시
test <- c(15,20,30,NA,45)
test[test<40]
test[test<40&!is.na(test)]
test[test%%3==0&!is.na(test)]
df <- data.frame(name=c('길동','춘향','철수수'))
gender=factor(c('M','F','M'))
df <- data.frame(name=c('길동','춘향','철수'),
gender=factor(c('M','F','M'))
age=c(30,16,21),
df <- data.frame(name=c('길동','춘향','철수'),
age=c(30,16,21),
gender=factor(c('M','F','M')))
df
#여성인 행 추출
df[df$gender=='F']
#25세 이상이고 남성인 행 추출
df[df$gender=='M',df$age>=25]
#2. if문
x <- 5
print('짝수입니다')
}
}
#2. if문
x <- 5
if(x%%2==0 {
} else{
}
if(x%%2==0 {
print('짝수입니다')
} else{
print('홀수입니다')
}
}
}
#2. if문
x <- 5
if(x%%2==0 {
} else{
}
if   (x%%2==0 {
#2. if문
x <- 5
if(x%%2==0),{
print('짝수입니다')
}else{print('홀수입니다')
}
if(x%%2==0),{
print('짝수입니다')
} else{print('홀수입니다')
}
if(x%%2==0) {
print('짝수입니다')
} else{print('홀수입니다')
}
x <- 5
if(x>1e-10){
print('양수')
}elst if(x< -1e-10){
print('음수')
}else{
print('zero')
}
if(x>1e-10){
print('양수')
} elst if(x< -1e-10){
print('음수')
} else{
print('zero')
}
if(x> 1e-10){
print('양수')
} elst if(x< -1e-10){
print('음수')
} else{
print('zero')
}
if(x> 1e-10){
print('양수')
} else if(x < -1e-10){
print('음수')
} else{print("zeor")
}
#3. ifelse 문
score <- 75
pass <- ifelse(score>=60,"합격","불합격격")
pass
# students.scv 파일 읽어서 학점 부여하기
students < read.csv('data/students.csv'
fileEncoding = 'euc-kr')
# students.scv 파일 읽어서 학점 부여하기
students <- read.csv('data/students.csv'
fileEncoding = 'euc-kr')
# students.scv 파일 읽어서 학점 부여하기
students <- read.csv('data/students.csv',
fileEncoding = 'euc-kr')
students
options(digits = 4)
apply(students[,2:4],1,mean)
students['평균'] = c(apply(students[,2:4],1,mean))
students
students['학점'] = ifelse(students$평균>90, 'A'
ifelse(students$평균>=80,'B',
ifelse(students$평균>=70,'C','D')))
students['학점'] = ifelse(students$평균>90, 'A',
ifelse(students$평균>=80,'B',
ifelse(students$평균>=70,'C','D')))
students
s <- 0
for (i in 1:100){
if(i %% 2 != 0)
{
s <- s + i
}
}
print(s)
i <- 1
factorial <- 1
while (i<=10) {
factorial <- factorial * 1
i <- i +1
}
print(factorial)
i <- 1
factorial <- 1
while (i<=10) {
factorial <- factorial * 1
i <- i +1
}
print(factorial)
i <- 1
factorial <- 1
while (i<=10) {
factorial <- factorial * 1
i <- i +1
}
print(factorial)
for(k in 1:9{
print(paste('2','x',k,'=',2*k))
})
# 구구단 만들기
for(k in 1:9{
print(paste('2','x',k,'=',2*k))
})
for(k in 1:9 {
print(paste('2','x',k,'=',2*k))
}
for(k in 1:9) {
print(paste('2','x',k,'=',2*k))
}
for (i in 2:9) {
print(paste(i,'단 ========================='))
for(k in 1:9) {
print(paste('i','x',k,'=',i*k))
}
}
for (i in 2:9) {
print(paste(i,'단 ========================='))
for(k in 1:9) {
print(paste(i,'x',k,'=',i*k))
}
}
x <- array(1:12, c(3,4))
View(x)
x <- array(1:12, c(3,4))
x <- array(1:12, c(3,4))
x <- array(1:12, c(3,4))
for (x in 1:12) {
x <- x + 0
}
#matrix 만들기
matrix(1:12,nrow = 3)
nrow <- 3
col <- 4
sum <- 0
sum2 <- 0
sum3 <- 0
sum <- 0
sum2 <- 0
sum3 <- 0
for (i in 1:nrow) {
for (k in 1:col) {
sum <- sum + mat[1,k]
}
}
for (i in 1:nrow) {
for (k in 1:col) {
sum <- sum + matrix[1,k]
sum2 <-sum2 + matrix[1,k]**2
sum3 <- sum3 + matrix[i,k]**i
}
}
#matrix 만들기
matrix(1:12,nrow = 3)
nrow <- 3
col <- 4
sum <- 0
sum2 <- 0
sum3 <- 0
for (i in 1:nrow) {
for (k in 1:col) {
sum1 <- sum1 + mat[1,k]
sum2 <- sum2 + mat[1,k]**2
sum3 <- sum3 + mat[i,k]**i
}
}
col <- 4
sum1 <- 0
sum2 <- 0
sum3 <- 0
for (i in 1:nrow) {
for (k in 1:col) {
sum1 <- sum1 + mat[1,k]
sum2 <- sum2 + mat[1,k]**2
sum3 <- sum3 + mat[i,k]**i
}
}
sum1 <- 0
sum2 <- 0
sum3 <- 0
for (i in 1:nrow) {
for (k in 1:col) {
sum1 <- sum1 + mat[1,k]
sum2 <- sum2 + mat[1,k]**2
sum3 <- sum3 + mat[i,k]**i
}
}
print(sum1, sum2, sum3)
array(*,c(3,4))
array(*:*,c(3,4))
for (i in 1:5) {
stat<-''
for (k in 1:i) {
star<-paste0(star,'+')
}
print(star)
}
for (i in 1:5) {
stat<-''
for (k in 1:i) {
star <- paste0(star,'+')
}
print(star)
}
for (i in 1:5) {
stat<-''
for (k in 1:i) {
star <- paste0(star, '+')
}
print(star)
}
for (i in 1:5) {
stat<-''
for (k in 1:i) {
star <- paste0(star, '+')
}
print(star)
}
for (i in 1:5) {
star<-''
for (k in 1:i) {
star <- paste0(star, '+')
}
print(star)
}
#list 만들기
lst = list()
lst <- append(lst,3)
lst
lst <- append(lst,5)
lst
lst
print(lst)
lst<- append(lst,7)
lst
lst[length(lst)]
length(lst)
lst[1]
lst[2]
lst<- list()
for (i in 1:5) {
lst <- append(lst,i)
}
lst
print(element)
lst<- list()
for (i in 1:5) {
lst <- append(lst,i)
}
lst
for (element in lst) {
print(element)
}
for (element in vec) {
print(element)
}
vec <- c(1,7,8)
for (element in vec) {
print(element)
}
for (element in mat)
print(element)
#matrix 만들기
matrix(1:12,nrow = 3)
nrow <- 3
col <- 4
sum1 <- 0
sum2 <- 0
sum3 <- 0
for (i in 1:nrow) {
for (k in 1:col) {
sum1 <- sum1 + mat[1,k]
sum2 <- sum2 + mat[1,k]**2
sum3 <- sum3 + mat[i,k]**i
}
}
print(sum1, sum2, sum3)
#별 그리기
for (i in 1:5) {
star<-''
for (k in 1:i) {
star <- paste0(star, '+')
}
print(star)
}
#list 만들기
lst = list()
lst <- append(lst,3)
lst <- append(lst,5)
print(lst)
lst<- append(lst,7)
length(lst)
lst[2]
lst<- list()
for (i in 1:5) {
lst <- append(lst,i)
}
lst
for (element in lst) {
print(element)
}
vec <- c(1,7,8)
for (element in vec) {
print(element)
}
for (element in mat)
print(element)
}
for (element in mat){
print(element)
}
for(num in 1:n){
it(n%%num==0){
print(num)
}
}
#약수
n <- 24
for(num in 1:n){
it(n%%num==0){
print(num)
}
}
#약수
n <- 24
for(num in 1:n){
it(n%%num==0){
print(num)
}
}
#약수
n <- 24
for(num in 1:n){
if(N%%num==0){
print(num)
}
}
#약수
N <- 24
for(num in 1:n){
if(N%%num==0){
print(num)
}
}
#약수의 합
sum <- 0
for (num in 1:N) {
if(N %% num==0){
sum <- sum + sum
}
}
print(sum)
sum <- sum + num
if(N %% num==0){
sum <- sum + num
}
for (num in 1:N) {
if(N %% num==0){
sum <- sum + num
}
}
print(sum)
#약수의 합
sum <- 0
print(sum)
#perfect number
#2에서 10000사이의 완전수를 찾으시오.
for(N in 2:10000){
sum <- 0
for (num in 1:N-1) {
if(N %% num==0){
sum <- sum + num
}
}
if(sum=N){
print(N)
}
}
#perfect number
#2에서 10000사이의 완전수를 찾으시오.
for(N in 2:10000){
sum <- 0
for (num in 1:N-1) {
if(N %% num==0){
sum <- sum + num
}
}
if(sum=N){
print(N)
}
}
#약수
N <- 24
for(num in 1:n){
if(N%%num==0){
print(num)
}
}
