group_by(cut) %>%
summarise(w=n())
diamonds %>%
group_by(cut) %>%
summarise(w=mean(price) %>%
ggplot(aes(cut,price))+
geom_point()
diamonds %>%
group_by(cut) %>%
summarise(w=n(price) %>%
ggplot(aes(cut,w))+
geom_point()
diamonds %>%
group_by(cut) %>%
summarise(w=n(price) %>%
ggplot(aes(cut,w))+
geom_point()
geom_point()
geom_point()
diamonds %>%
group_by(cut) %>%
summarise(w=n(price) %>%
ggplot(aes(cut,w))+
geom_point()
diamonds %>%
group_by(cut) %>%
summarise(w=mean(price) %>%
ggplot(aes(cut,w))+
geom_point()
w
diamonds %>%
group_by(cut) %>%
summarise(w=mean(price) %>%
ggplot(aes(cut,w))+
geom_bar(stat='identity')
diamonds %>%
group_by(cut) %>%
summarise(w=mean(price) %>%
ggplot(aes(cut,w))+
geom_bar(stat='identity')
diamonds %>%
group_by(cut) %>%
summarise(w=mean(price)) %>%
ggplot(aes(cut,w))+
geom_bar(stat='identity')
library(dplyr)
library(ggplot2)
diamonds %>%
group_by(cut) %>%
summarise(w=mean(price)) %>%
ggplot(aes(cut,w))+
geom_bar(stat='identity')
diamonds
ggplot(diamonds,aes(cut,color))+
geom_point()
ggplot(diamonds,aes(cut,color,price))+
geom_point()
diamonds %>%
group_by(cut,color) %>%
summarise(w=n(price)) %>%
ggplot(aes(cut,color))+
geom_point()
w <- diamonds %>%
group_by(cut,color) %>%
summarise(w=mean(price)) %>%
ggplot(w,aes(cut,w))+
geom_bar(stat='identity')
w <- diamonds %>%
group_by(cut,color) %>%
summarise(w=mean(price)) %>%
ggplot(w,aes(cut,w,col=cut))+
geom_bar(stat='identity')
w <- diamonds %>%
group_by(cut,color) %>%
summarise(w=mean(price)) %>%
ggplot(w,aes(cut,w))+
geom_bar(stat='identity')
diamonds
w <- diamonds %>%
group_by(cut,color) %>%
summarise(w=mean(price)) %>%
ggplot(w,aes(cut,w))+
geom_bar(stat='identity')
mean1 <- diamonds %>%
group_by(cut,color) %>%
summarise(w=mean(price)) %>%
ggplot(w,aes(cut,w))+
geom_bar(stat='identity')
mean1 <- diamonds %>%
group_by(cut,color) %>%
summarise(w=mean(price)) %>%
ggplot(mean1,aes(cut,w))+
geom_bar(stat='identity')
mean1 <- diamonds %>%
group_by(cut,color) %>%
summarise(w=mean(price))
ggplot(mean1,aes(cut,w))+
geom_bar(stat='identity')
ggplot(mean1,aes(cut,w))+
geom_bar(stat='identity')
facet_wrap(~color)
mean1 <- diamonds %>%
group_by(cut,color) %>%
summarise(w=mean(price))
ggplot(mean1,aes(cut,w))+
geom_bar(stat='identity')
facet_wrap(~color)
mean1 <- diamonds %>%
group_by(cut,color) %>%
summarise(w=mean(price))
ggplot(mean1,aes(cut,w))+
geom_bar(stat='identity')+
facet_wrap(~color)
q <- diamonds %>%
group_by(cut,color) %>%
summarise(w=mean(price))
ggplot(q,aes(cut,w))+
geom_bar(stat='identity')+
facet_wrap(~color)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(ggplot2)
library(dplyr)
diamonds
ggplot(diamonds,aes(cut))+
geom_bar()
ggplot(diamonds,aes(cut,fill=cut))+
geom_bar()
# 현실 세계의 모델링
x = c(3,6,9,12)
# 현실 세계의 모델링
x = c(3,6,9,12.)
y = c(3,4,5.)
y = c(3,4,5.5,6.5)
plot(x,y)
#model 1: y=o.5x+1.0
y1= 0.5*x + 1
# 평균 제곱 오차: mean squared error
(y-y1)**2
sum((y-y1)**2)
mse <- sum((y-y1)**2)/length(y)
mse
#model 2: y=5/12x +7/4
y2 = 5* x/12 +7/4
mse2 = sum((y-y2)**2)/length(y)
mse2
# R 단순 선형 회귀 모델 lm
model <- lm(y ~ x)
model
plot(x, y)
abline(model, col='red')
fitted(model)
mse_model <- sum((y - fitted(model))**2)/length(y)
mse_model
# wksck - Residuals
residuals(modle)
# R 단순 선형 회귀 모델 lm
model <- lm(y ~ x)
model
# wksck - Residuals
residuals(modle)
# wksck - Residuals
residuals(model)
#잔차 제곱합
deviance(model)
# 평균 제곱 오차(MSE0)
deviance(model)/length(y)
summary(model)
# 예측
newx <-  data.frame(x=c(1.2,.20,20.65)
newy <-  predict(model, newx)
newy
# 예측
newx <-  data.frame(x=c(1.2,2.0,20.65))
newy <-  predict(model, newdata = newx)
newy
x <- c(10.0, 12.0, 9.5, 22.2,8.0)
y <- c(360.2,420.0,359.5,679.0,315.3)
model <- lm(y~x)
medel
model
deviance(model)
deviance(model)/length(y)
newy <- predict(model, newdata = newx)
newx <- c(10.5,25.0,15.0)
newy <- predict(model, newdata = newx)
newx <- data.frame(c(10.5,25.0,15.0))
newy <- predict(model, newdata = newx)
newy
summary(model)
# 단순 선형회귀의 적용
# cars 데이터
str(cars)
plot(cars)
car_model <-lm(dist~speed, data = cars)
coef(car_model)
# 회귀식: dist = 3.9423 * speed - 17.5791
adline(car_model)
# 회귀식: dist = 3.9423 * speed - 17.5791
adline(car_model, col='red')
coef(car_model)
# 회귀식: dist = 3.9423 * speed - 17.5791
adline(car_model, col='red')
car_model <-lm(dist~speed, data = cars)
# 단순 선형회귀의 적용
# cars 데이터
str(cars)
plot(cars)
car_model <-lm(dist~speed, data = cars)
coef(car_model)
# 회귀식: dist = 3.9423 * speed - 17.5791
adline(car_model, col='red')
# 회귀식: dist = 3.9423 * speed - 17.5791
abline(car_model, col='red')
summary(car_model)
par(mfrow=c(2,2))
plot(car_model)
par(mfrow=c(1,1))
# 속도 21.5 , 제동거리?
3.9423*21.5-17.5791
# 속도 21.5 , 제동거리?
newx <- data.frame(speed = c(21.5))
predict(car_model,new1)
predict(car_model,newx)
# 고차식(polynomial) 적용하면 어떻게 될까?
lm2 <- lm(dist~poly(speed,2)), data(=cars)
# 고차식(polynomial) 적용하면 어떻게 될까?
lm2 <- lm(dist~poly(speed,2), data=cars)
plot(cars)
x <- seq(4,25,length.out=211)
head(x)
y <-  predict(lm2,data.frame(speed=x))
y
lines(x,y,col='purple')
abline(car_model,col='red')
lines(x,y,col='purple', lwd=2)
abline(car_model,col='red',lwd=2)
summary(lm2)
plot(cars)
# cars 1차식부터 4차식까지
x <- seq(4,25,length.out=211)
colors <- c('red','purple','dorkorange','blue')
for (i in 1:4) {
m <- lm(dist~poly(speed,i), data=cars)
assign(paste('m',i,sep=','),m)
y <- predict(m,data.frame(speed=x))
lines(x,y,col=colors[i], lwd=2)
}
for (i in 1:4) {
m <- lm(dist~poly(speed,i), data=cars)
assign(paste('m',i,sep=','),m)
y <- predict(m,data.frame(speed=x))
lines(x,y,col=colors[i], lwd=2)
}
for (i in 1:4) {
m <- lm(dist~poly(speed,i), data=cars)
assign(paste('m',i,sep='.'),m)
y <- predict(m,data.frame(speed=x))
lines(x,y,col=colors[i], lwd=2)
}
colors <- c('red','purple','darkorange','blue')
for (i in 1:4) {
m <- lm(dist~poly(speed,i), data=cars)
assign(paste('m',i,sep='.'),m)
y <- predict(m,data.frame(speed=x))
lines(x,y,col=colors[i], lwd=2)
}
# 분산 분석(anova)
anova(m.1,m.2,m.3,m.4)
install.packages(UsingR)
install.packages(galton-stata11)
read.csv('data/garton-stata11')
galton <- read.csv('data/galton-stata11')
read.csv("C:\\Workspace\\R\\Galtons Height Data.csv")
read.csv("C:\\Workspace\\R\\Galtons Height Data.csv")
read.csv("C:\\Workspace\\R\\Galtons Height Data.csv")
galton <- read.csv('data/galton-stata11')
read.csv("C:\\Workspace\\R\\Galtons Height Data.csv")
read.csv('data/garton-stata11')
galton <- read.csv('data/galton-stata11')
read.csv("C:\\Workspace\\R\\Galtons Height Data.csv")
read.csv("C:\\Workspace\\R\\Galton.csv")
data(galton)
data(galton)
data(galton)
install.packages('galton')
data(galton)
str(galton)
read.csv("C:\\Workspace\\R\\Galton.csv")
read.csv("C:\\Workspace\\R\\Galton.csv")
read.csv("C:\\Workspace\\R\\data\\Galton.csv")
read.csv("C:\\Workspace\\R\\data\\Garton\\galton.csv")
data(galton)
str(galton)
data(galton)
str(galton)
http://www.randomsircives.org/randeom/data/galton.txt
read.csv("C:\\Workspace\\R\\Galtons Height Data.csv")
data.frame(galtons Height Data)
str(galton)
str(Galtons Height Data)
plot(Galtons Height Data)
plot(Galtons Height)
gt <-  read.csv("C:\\Workspace\\R\\Galtons Height Data.csv")
str(Galtons Height)
gt <-  read.csv("C:\\Workspace\\R\\Galtons Height Data.csv")
str(gt)
plot(gt)
View(gt)
coef(gt)
abline(gt, col='red')
summary(gt)
summary(gt)
par(mfrow=c(2,2))
plot(gt)
par(mfrow=c(1,1))
gt
m <- lm(height,parents)
m <- lm(~height)
m <- lm(height~parents)
m <- lm(height ~ parents)
m <- lm(height ~ father)
str(gt)
plot(gt)
m <- lm(height ~ familt)
par(mfrow=c(1,2))
hist(galton$child,col="blue",breaks=100)
par(mfrow=c(1,2))
hist(gt$child,col="blue",breaks=100)
hist(gt$parent,col="blue",breaks=100)
par(mfrow=c(1,1))
m <- lm(height ~ father)
m <-lm(father ~ gender='M')
m <-lm(father ~ gender)
str(gt)
plot(gt)
m <-lm(father ~ gender='M', data=gt)
m <-lm(father ~ gender, data=gt)
m <-lm(gender ~ father, data=gt)
# 단순 선형회귀의 적용
# cars 데이터
str(cars)
plot(cars)
car_model <-lm(dist~speed, data = cars)
coef(car_model)
str(gt)
gt <-  read.csv("C:\\Workspace\\R\\Galtons Height Data.csv")
str(gt)
plot(gt)
m <-lm(height ~ father, data=gt)
m <-lm(gt$Height ~ gt$Father)
m
m <-lm(gt$Kids ~ gt$Father)
m
m <-lm(gt$Gender=M ~ gt$Father)
m <-lm(gt$Gender='M' ~ gt$Father)
m <-lm(gt$Gender ~ gt$Father)
m <-lm(gt$Gender ~ gt$Father)
m <-lm(gt$Height ~ gt$Father)
m
plot(m)
plot(m)
# 아버지와 아들의 키
# 아버지와 아들의 키
gt
gt <-  read.csv("C:\\Workspace\\R\\Galtons Height Data.csv")
gt
head(df)
df
head(df)
head(galton)
galton <- df %>%
filter(Gender="M") %>%
mutate(father= 2.54*father , son = 2.54*height)
head(galton)
# women data
women
plot(women)
m <- lm(weight~height, data=women)
abline(m,col='red')
# women data
women
plot(women)
m <- lm(weight~height, data=women)
abline(m,col='red')
summary(m)
abline(m,col='red')
abline(m,col='red',lwd=2)
# 2차식으로 모델링
m2 <- lm(weights ~poly)
# 2차식으로 모델링
m2 <- lm(weights ~poly(height,2),data=women)
# 2차식으로 모델링
m2 <- lm(weights ~ poly(height,2),data=women)
x <- seq(58,72,300)
y <- predict(m2, data.frame(height=x))
# 2차식으로 모델링
m2 <- lm(weights ~ poly(height,2),data=women)
plot(x, y, col='blue')
# 2차식으로 모델링
m2 <- lm(weight ~ poly(height,2),data=women)
x <- seq(58,72,length.out(300))
y <- predict(m2, data.frame(height=x))
plot(x, y, col='blue', size=1)
plot(x, y, col='blue', lwd=2)
# 2차식으로 모델링
m2 <- lm(weight ~ poly(height,2),data=women)
x <- seq(58,72,length.out(300))
x <- seq(58,72,length.out=300)
y <- predict(m2, data.frame(height=x))
plot(x, y, col='blue', lwd=2)
summary(m2)
coef(m2)
galton <- df %>%
filter(Gender="M") %>%
mutate(father= 2.54*father , son = 2.54*height)
library(ggplot2)
library(dplyr)
gt <-  read.csv("C:\\Workspace\\R\\Galtons Height Data.csv")
gt
head(gt)
galton <- df %>%
filter(Gender="M") %>%
mutate(father= 2.54*father , son = 2.54*height)
galton <- df %>%
filter(Gender == 'M') %>%
mutate(father=2.54*Father, son=2.54*Height)
gt
galton <- df %>%
filter(Gender == 'M') %>%
mutate(father=2.54*Father, son=2.54*Height)
library(ggplot2)
library(dplyr)
galton <- df %>%
filter(Gender == 'M') %>%
mutate(father=2.54*Father, son=2.54*Height)
library(ggplot2)
library(dplyr)
galton <- df %>%
filter(Gender == 'M') %>%
mutate(father=2.54*Father, son=2.54*Height)
gt <-  read.csv('http://www.randomservices.org/random/data/Galton.txt',sep= '\t')
gt
head(gt)
galton <- df %>%
filter(Gender == 'M') %>%
mutate(father=2.54*Father, son=2.54*Height)
galton <- gt %>%
filter(Gender == 'M') %>%
mutate(father=2.54*Father, son=2.54*Height)
head(galton)
head(galton)
ggplot(galton, aes(father, son)) +
geom_point(position = 'jitter', color='darkorange')+
geom_abline(intercept = coef(model)[1]. slope = coef(model)[2]),color='darkblue',size=1)
ggplot(galton, aes(father, son)) +
geom_point(position = 'jitter', color='darkorange')+
geom_abline(intercept = coef(model)[1], slope = coef(model)[2]), color='darkblue',size=1)
ggplot(galton, aes(father, son)) +
geom_point(position = 'jitter', color='darkorange')+
geom_abline(intercept = coef(model)[1], slope = coef(model)[2], color='darkblue',size=1)
model <- lm(son~father, data = galton)
coef(model)
summary(model)
model <- lm(son~father, data = galton)
coef(model)
ggplot(galton, aes(father, son)) +
geom_point(position = 'jitter', color='darkorange')+
geom_abline(intercept = coef(model)[1], slope = coef(model)[2], color='darkblue',size=1)
par(mfrow=c(2,2))
plot(model)
par(mfrow=c(1,1))
plot(model)
par(mfrow=c(1,1))
plot(model)
plot(model)
par(mfrow=c(2,2))
plot(model)
# 다차식 회귀
x <- seq(min(galton$father), max(galton$father), length.out=1000)
plot(jitter(galton$father), jitter(galton$son),
xlab='Father', ylab='Son')
# 다차식 회귀
x <- seq(min(galton$father), max(galton$father), length.out=1000)
plot(jitter(galton$father), jitter(galton$son),
xlab='Father', ylab='Son')
colors <- c('red','purple','darkorange','blue')
for (i in 1:4) {
m <- lm(son ~ poly(father, i), data=galton)
assign(paste('m', i, sep='.'), m)
y <- predict(m, data.frame(father=x))
lines(x, y, col=colors[i], lwd=2)
}
View(m)
anova(m.1, m.2, m.3, m.4)
par(mfrow=c(1,1))
# 다차식 회귀
x <- seq(min(galton$father), max(galton$father), length.out=1000)
plot(jitter(galton$father), jitter(galton$son),
xlab='Father', ylab='Son')
colors <- c('red','purple','darkorange','blue')
for (i in 1:4) {
m <- lm(son ~ poly(father, i), data=galton)
assign(paste('m', i,sep='.'), m)
y <- predict(m, data.frame(father=x))
lines(x, y, col=colors[i], lwd=2)
}
anova(m.1, m.2, m.3, m.4)
head(galton)
summary(model)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
